const createColour=function(e,r,n,t){return{r:e,g:r,b:n,a:t}},defaultVertexShader="\nattribute vec4 position;\nvoid main() {\n    gl_Position = position / vec4(100.0, 100.0, 100.0, 100.0);\n}",defaultFragmentShader="\nvoid main() {\n    gl_FragColor = vec4(mod(gl_FragCoord.x, 1.0), mod(gl_FragCoord.y, 1.0), 0.3, 1.0);\n}";function loadShader(e,r,n){const t=e.createShader(r);return e.shaderSource(t,n),e.compileShader(t),e.getShaderParameter(t,e.COMPILE_STATUS)?t:(console.error("Could not compiler shader: "+e.getShaderInfoLog(t)),null)}function createShaderProgram(e,r=null,n=null){const t=loadShader(e,e.VERTEX_SHADER,r||defaultVertexShader),o=loadShader(e,e.FRAGMENT_SHADER,n||defaultFragmentShader),a=e.createProgram();return e.attachShader(a,t),e.attachShader(a,o),e.linkProgram(a),e.getProgramParameter(a,e.LINK_STATUS)?{program:a,attribLocations:{position:e.getAttribLocation(a,"position")},uniformLocations:{projection:e.getUniformLocation(a,"uProjection"),modelView:e.getUniformLocation(a,"uModelView")}}:(console.error("Could not init shader program: "+e.getProgramInfoLog(a)),null)}function createBuffer(e){const r=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,r);return e.bufferData(e.ARRAY_BUFFER,new Float32Array([-1,1,1,1,-1,-1,1,-1]),e.STATIC_DRAW),{position:r}}const createScreen=(e,r,n,t)=>({input:e,update:r,render:n,evaluate:t}),createDullScreen=(e,r)=>createScreen(e=>!0,e,r,()=>null);function start(e,r){const n=e.getContext("webgl");if(null===n)return void alert("the police the FBI are coming in your window man");const t=n.canvas.clientWidth,o=n.canvas.clientHeight;screens=[r];const a=(e=null)=>{const r=screens[screens.length-1].update.next(e);if(r.done){const e=screens[screens.length-1].evaluate();screens.pop(),screens.length>0&&a(e)}r.value&&screens.push(r.value)};setInterval(()=>{if(screens.length>0)for(r of(a(),n.clearColor(0,0,0,1),n.clear(n.COLOR_BUFFER_BIT|n.DEPTH_BUFFER_BIT),screens))r.render(n,0,0,t,o)},50)}